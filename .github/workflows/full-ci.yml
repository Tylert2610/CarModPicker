name: Full CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  backend:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install backend dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run backend linting
        run: |
          cd backend
          black --check --diff .
          isort --check-only --diff .

      - name: Run backend type checking
        run: |
          cd backend
          mypy app/ --ignore-missing-imports

      - name: Run backend tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          SECRET_KEY: test-secret-key-for-ci
          ALGORITHM: HS256
          ACCESS_TOKEN_EXPIRE_MINUTES: 30
          ALLOWED_ORIGINS: http://localhost:3000
          DEBUG: true
          PROJECT_NAME: CarModPicker API
          API_STR: /api/v1
          SENDGRID_API_KEY: test-key
          FROM_EMAIL: test@example.com
        run: |
          cd backend
          pytest --cov=app --cov-report=xml --cov-report=term-missing

  frontend:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Run frontend linting
        run: |
          cd frontend
          npm run lint

      - name: Run frontend type checking
        run: |
          cd frontend
          npm run type-check

      - name: Build frontend application
        run: |
          cd frontend
          npm run build

      - name: Test frontend build
        run: |
          cd frontend
          npx serve -s dist -l 3000 &
          sleep 5
          curl -f http://localhost:3000 || exit 1

  # Optional: Add a job that depends on both backend and frontend
  # This can be used for additional checks that require both to pass
  integration:
    runs-on: ubuntu-latest
    needs: [backend, frontend]

    steps:
      - uses: actions/checkout@v4

      - name: Integration tests passed
        run: |
          echo "âœ… Backend and frontend tests completed successfully"
          echo "ðŸš€ Ready for deployment!"
