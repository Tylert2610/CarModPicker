"""implement shared parts architecture

Revision ID: 58158c9af082
Revises: 4e70751f099f
Create Date: 2025-08-19 22:58:45.172590

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = "58158c9af082"
down_revision: Union[str, None] = "4e70751f099f"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "build_list_parts",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("build_list_id", sa.Integer(), nullable=False),
        sa.Column("part_id", sa.Integer(), nullable=False),
        sa.Column("added_by", sa.Integer(), nullable=False),
        sa.Column("notes", sa.String(), nullable=True),
        sa.Column("added_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["added_by"],
            ["users.id"],
        ),
        sa.ForeignKeyConstraint(
            ["build_list_id"],
            ["build_lists.id"],
        ),
        sa.ForeignKeyConstraint(
            ["part_id"],
            ["parts.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_build_list_parts_id"), "build_list_parts", ["id"], unique=False
    )
    op.add_column("build_lists", sa.Column("created_at", sa.DateTime(), nullable=True))
    op.add_column("build_lists", sa.Column("updated_at", sa.DateTime(), nullable=True))
    op.add_column(
        "parts", sa.Column("user_id", sa.Integer(), nullable=True)
    )  # Temporarily nullable for migration
    op.add_column("parts", sa.Column("brand", sa.String(), nullable=True))
    op.add_column("parts", sa.Column("specifications", sa.JSON(), nullable=True))
    op.add_column("parts", sa.Column("is_verified", sa.Boolean(), nullable=True))
    op.add_column("parts", sa.Column("source", sa.String(), nullable=True))
    op.add_column("parts", sa.Column("edit_count", sa.Integer(), nullable=True))
    op.add_column("parts", sa.Column("created_at", sa.DateTime(), nullable=True))
    op.add_column("parts", sa.Column("updated_at", sa.DateTime(), nullable=True))
    op.drop_index(op.f("ix_parts_description"), table_name="parts")
    op.drop_index(op.f("ix_parts_manufacturer"), table_name="parts")
    op.drop_index(op.f("ix_parts_part_number"), table_name="parts")
    op.drop_index(op.f("ix_parts_part_type"), table_name="parts")
    op.drop_index(op.f("ix_parts_price"), table_name="parts")

    # Data migration: Set user_id for existing parts based on build list owner
    op.execute(
        """
        UPDATE parts 
        SET user_id = build_lists.user_id 
        FROM build_lists 
        WHERE parts.build_list_id = build_lists.id
    """
    )

    # Data migration: Create BuildListPart entries for existing relationships
    op.execute(
        """
        INSERT INTO build_list_parts (build_list_id, part_id, added_by, added_at)
        SELECT build_list_id, id, user_id, NOW()
        FROM parts
        WHERE build_list_id IS NOT NULL
    """
    )

    # Set default values for new required fields
    op.execute("UPDATE parts SET is_verified = false WHERE is_verified IS NULL")
    op.execute("UPDATE parts SET source = 'user_created' WHERE source IS NULL")
    op.execute("UPDATE parts SET edit_count = 0 WHERE edit_count IS NULL")
    op.execute("UPDATE parts SET created_at = NOW() WHERE created_at IS NULL")
    op.execute("UPDATE parts SET updated_at = NOW() WHERE updated_at IS NULL")
    op.execute("UPDATE build_lists SET created_at = NOW() WHERE created_at IS NULL")
    op.execute("UPDATE build_lists SET updated_at = NOW() WHERE updated_at IS NULL")

    # Now make columns non-nullable
    op.alter_column("build_lists", "created_at", nullable=False)
    op.alter_column("build_lists", "updated_at", nullable=False)
    op.alter_column("parts", "created_at", nullable=False)
    op.alter_column("parts", "updated_at", nullable=False)
    op.alter_column("parts", "is_verified", nullable=False)
    op.alter_column("parts", "source", nullable=False)
    op.alter_column("parts", "edit_count", nullable=False)
    op.alter_column("parts", "user_id", nullable=False)

    op.drop_constraint(op.f("parts_build_list_id_fkey"), "parts", type_="foreignkey")
    op.create_foreign_key("fk_parts_user_id", "parts", "users", ["user_id"], ["id"])
    op.drop_column("parts", "build_list_id")
    op.drop_column("parts", "manufacturer")
    op.drop_column("parts", "part_type")
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "parts",
        sa.Column("part_type", sa.VARCHAR(), autoincrement=False, nullable=True),
    )
    op.add_column(
        "parts",
        sa.Column("manufacturer", sa.VARCHAR(), autoincrement=False, nullable=True),
    )
    op.add_column(
        "parts",
        sa.Column("build_list_id", sa.INTEGER(), autoincrement=False, nullable=False),
    )
    op.drop_constraint("fk_parts_user_id", "parts", type_="foreignkey")
    op.create_foreign_key(
        op.f("parts_build_list_id_fkey"),
        "parts",
        "build_lists",
        ["build_list_id"],
        ["id"],
    )
    op.create_index(op.f("ix_parts_price"), "parts", ["price"], unique=False)
    op.create_index(op.f("ix_parts_part_type"), "parts", ["part_type"], unique=False)
    op.create_index(
        op.f("ix_parts_part_number"), "parts", ["part_number"], unique=False
    )
    op.create_index(
        op.f("ix_parts_manufacturer"), "parts", ["manufacturer"], unique=False
    )
    op.create_index(
        op.f("ix_parts_description"), "parts", ["description"], unique=False
    )
    op.drop_column("parts", "updated_at")
    op.drop_column("parts", "created_at")
    op.drop_column("parts", "edit_count")
    op.drop_column("parts", "source")
    op.drop_column("parts", "is_verified")
    op.drop_column("parts", "specifications")
    op.drop_column("parts", "brand")
    op.drop_column("parts", "user_id")
    op.drop_column("build_lists", "updated_at")
    op.drop_column("build_lists", "created_at")
    op.drop_index(op.f("ix_build_list_parts_id"), table_name="build_list_parts")
    op.drop_table("build_list_parts")
    # ### end Alembic commands ###
